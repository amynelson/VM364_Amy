{\rtf1\ansi\ansicpg1252\cocoartf1265\cocoasubrtf210
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\margl1440\margr1440\vieww14480\viewh13660\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural

\f0\fs24 \cf0 #Research Assignment: 3rd Person Camera Following Ball\
##Amy Nelson\
\
Our final project\'92s main mechanic is a ball rolling down a slide.  There are plenty of ways to make ball roll, and my first thought was simply to use gravity and friction on a sphere.  While obviously this made the ball roll, the player has zero controllers and there is no camera to track your position.  I spent time experimenting with third person controllers, we couldn\'92t figure out how to get the camera, mesh, and controllers operating in unison without one misbehaving due to another.  I tried to ditch the third person controller while maintaining the camera by nesting it as a child within the object.  This worked until you tried to move horizontally across the track.  We also didn\'92t want the player to be able to stop completely or move backwards up the slide.  I searched for a while and decided that simply using the left and right arrow keys to add force to the object, while removing the ability to go forwards and backwards, would be the easiest way.  While adding force worked, we wanted to our track to curve, rather than be entirely linear, and as the track curves the forces still moved the ball directly along the x axis, rather than horizontally in relation to the slide.  This also still hadn\'92t solved our issue with getting the camera to follow the ball in any sort of logical manner.  The camera needs to move across all three axises, whilst not rolling around the ball\'92s pivot point as it spins.  From this point I decided to attack each step individually rather than trying to take components from prefabs and mesh them together.  After all of this struggle we realized that Unity has a RollerBall prefab, which comes from an official Unity tutorial about how to make a basic \'93Roll-a-Ball\'94 game.  This solved all of our third person controller issues immediately, and we could simply increase the Mass and Drag of the ball to prevent it from moving backward up the track.  On the Unity Forums we found someone asking how to rotate a camera around a single axis, looking for a way to control a ball\'92s third person camera in the same way that we were.  We had been thinking that the camera would automatically orient itself around the ball horizontally, but in retrospect that would have been extremely difficult to do because a rolling sphere has no specific \'93front\'94 or \'93back\'94 like a sliding object would, for example Mario on the slides in Super Mario 64.  The user asking the question had created an empty object within the sphere for the camera to follow.  The person answering responded by providing a script that moved that camera independent from adding force to the ball.  They said this was more of a work around than anything else, because there isn\'92t a simple way to clone a rotation value using a Vector3.  While this was useful, I decided that for the sake and simplicity of our game, having to control both the camera and the ball would be unnecessary and felt odd.  To fix this, we decided to create the slide with only slight horizontal variation, rather than it curving in all different directions, so that the camera could always be facing the same direction, and the player would only need to use the arrow keys to control the sphere.  By simply parenting the camera to the empty object within the sphere, we were able to attach the camera independent of the sphere\'92s rotation.  The choices we made throughout this process were a reflection of the simplicity we want our game to maintain, both conceptually and because of our very basic understanding of scripting.}